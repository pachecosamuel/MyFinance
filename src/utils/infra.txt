project_root/
├── .gitignore
├── LICENSE
├── README.md
├── poetry.lock
├── alembic.init
├── .env
├── migrations
├── pyproject.toml          # Gerenciado pelo Poetry
├── src/                    # Todo o código-fonte do projeto
│   ├── utils/ 
│   ├── app/                # Módulo principal do aplicativo
│   │   ├── __init__.py
│   │   ├── domain/         # Entidades da aplicação
│   │   │   ├── __init__.py
│   │   │   └── budget.py   # Modelos de domínio
│   │   │   └── user.py   # Modelos de domínio
│   │   ├── application/    # Casos de uso e regras de negócio
│   │   │   ├── __init__.py
│   │   │   └── use_cases.py
│   │   ├── infrastructure/ # Conexão com recursos externos (DB, APIs)
│   │   │   ├── __init__.py
│   │   │   └── orm.py      # Configuração do ORM
│   │   ├── interfaces/     # Interfaces (ex.: REST APIs, CLI)
│   │   │   ├── __init__.py
│   │   │   └── api.py
│   ├── tests/              # Testes unitários e de integração
│       ├── __init__.py
│       └── test_sample.py



from src.utils import GetBrasiliaTime
from sqlalchemy import Column, String, Boolean, Enum, ForeignKey
from sqlalchemy.orm import relationship
from app.domain.BaseModel import BaseModel
from enum import Enum as PyEnum

class LoginProvider(PyEnum):
    LOCAL = "local"
    GOOGLE = "google"
    MICROSOFT = "microsoft"

class User(BaseModel):
    __tablename__ = 'users'

    name = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password_hash = Column(String, nullable=True)  # Para autenticação local
    provider = Column(Enum(LoginProvider), default=LoginProvider.LOCAL)
    is_active = Column(Boolean, default=True)
    roles = relationship("Role", back_populates="users")  # Relacionamento com a tabela de papéis

    def __repr__(self):
        return f"User(user_id={self.user_id}, name='{self.name}', email='{self.email}')"
